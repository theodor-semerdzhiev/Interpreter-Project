

class BSTNode(value) {
    let val = value;
    let left = null;
    let right = null;
}

class BST() {
    let root = null;

    private func _insert(r, val) {
        if(r == null) {
            return BSTNode(val);
        } else if(r->val < val) {
            r->left = _insert(r->left, val);
        } else {
            r->right = _insert(r->right, val);
        }
        return r;
    }

    func insert(val) {
        root = _insert(root,val);
    }
}

let t = BST();
let i = 0;
let sign = -1;
while(i < 4) {
    t->insert(i*sign);
    i = i + 1;
    sign = sign * -1;
}

println(t);

func Inorder(root) {
    if(root == null) {
        return;
    }
    println(root->val);

    Inorder(root->left);
    Inorder(root->right);
}

func Preorder(root) {
    if(root == null) {
        return;
    }

    Preorder(root->left);
    println(root->val);
    Preorder(root->right);

}

Inorder(t->root);

Preorder(t->root);







